---
description: 
globs: 
alwaysApply: true
---
# AI Marketplace Development Guide

The AI marketplace is the core feature of this application, providing users with access to various AI models.

## Page Layout Order (AIModelMarketplace.tsx)
The marketplace now uses a **Unified Generation Interface** that combines model selection, input methods, and generation controls:
1. **Unified Generation Interface** (UnifiedGenerationInterface) - Single interface replacing separate components
2. **Image Display** - Show generated/uploaded results  
3. **Pipeline Processing** - Multi-step image processing with clothes changing support
4. **Trending Section** - Popular model categories
5. **Featured Models Grid** - Browse available models

## Unified Generation Interface Features
- **Smart Model Selection** with automatic workflow detection
- **Dynamic Input Methods** (text prompt vs image upload based on selected model)
- **Context-aware UI** that adapts based on model type
- **Color-coded Type Badges** (orange for Text to Image, blue for Image to Video, green for Image to Image)
- **Enhanced Validation** and status indicators
- **Single Interface** combining Generate Images, Model Selector, and Get Started sections

## Model ID Format Standards
- **Always use full fal-ai format**: `"fal-ai/flux/schnell"` instead of short names like `"schnell"`
- **Model titles should match model IDs** for consistency and clarity (e.g., title: "fal-ai/flux-pro/kontext")
- This standardization applies to all model references in:
  - `src/constants/models.ts` - Featured models array (both `id` and `title` fields)
  - `src/constants/pipelineModels.ts` - Pipeline model configurations
  - `src/components/marketplace/ModelSelector.tsx` - Model options
  - `src/services/imageGeneration.ts` - API calls and model detection
  - Backend functions support both formats for backward compatibility
- **Recent Update**: FLUX Pro Kontext model title updated to use full model ID format for consistency

## Pipeline Processing & Clothes Changing
- **FLUX Pro Kontext Support** for advanced image-to-image transformations
- **Clothes Changing Functionality** now fully working with proper FAL.ai client integration
- **Modern Edge Function** using `@fal-ai/client` instead of direct HTTP calls
- **Enhanced Error Handling** with proper validation and user-friendly messages
- **Data URL Support** for uploaded images (base64 format for API compatibility)
- **Comprehensive Test Coverage** with 20+ passing tests for clothes changing functionality

## Model Data Management
- All model data is centralized in [models.ts](mdc:src/constants/models.ts)
- Use the `FeaturedModel` interface for type safety
- Category counts are automatically calculated from actual model data
- Model ordering prioritizes: Text to Image → Image to Video → Others
- To add new models, update the `featuredModels` array in [models.ts](mdc:src/constants/models.ts)

## Key Marketplace Components

### CategoryFilter Component
- [CategoryFilter.tsx](mdc:src/components/marketplace/CategoryFilter.tsx) dynamically calculates category counts
- Uses `getCategoryCounts()` function from [models.ts](mdc:src/constants/models.ts)
- Categories with no models show "0" count and are automatically disabled
- Disabled categories have reduced opacity and cannot be selected
- Supports checkbox-style filtering with proper accessibility features
- Visual feedback for disabled states (cursor: not-allowed, opacity: 50%)

### ModelGrid and ModelCard
- [ModelGrid.tsx](mdc:src/components/marketplace/ModelGrid.tsx) handles filtering and display logic
- [ModelCard.tsx](mdc:src/components/marketplace/ModelCard.tsx) renders individual model cards
- Supports search, category filtering, and sorting
- Each model card shows category badges, tags, and generation capabilities

### Image Generation Pipeline
- [UnifiedGenerationInterface.tsx](mdc:src/components/marketplace/UnifiedGenerationInterface.tsx) - Main interface combining all generation features
- [ImagePipeline.tsx](mdc:src/components/marketplace/ImagePipeline.tsx) - Multi-step image processing with clothes changing
- [MultiImageDisplay.tsx](mdc:src/components/marketplace/MultiImageDisplay.tsx) - Display generated images
- [ImageUploadSection.tsx](mdc:src/components/marketplace/ImageUploadSection.tsx) - File upload with data URL conversion
- [ModelSelector.tsx](mdc:src/components/marketplace/ModelSelector.tsx) - Enhanced model selection with type indicators

### Backend Pipeline Processing
- [process-image-pipeline/index.ts](mdc:supabase/functions/process-image-pipeline/index.ts) - Updated Edge Function with FAL.ai client
- [pipelineProcessing.ts](mdc:src/utils/pipelineProcessing.ts) - Frontend pipeline utilities
- **Key Fix**: Updated from HTTP fetch to `fal.subscribe()` method for better reliability
- **Model Support**: Full compatibility with `fal-ai/flux-pro/kontext` for clothes changing

## Adding New Models
1. Add model data to `featuredModels` array in [models.ts](mdc:src/constants/models.ts)
2. **Use full fal-ai format** for model ID (e.g., `"fal-ai/model-name"`)
3. **Set title to match the model ID** for consistency (e.g., title: `"fal-ai/model-name"`)
4. Include `type` field indicating model capability (Text to Image, Image to Video, etc.)
5. Ensure `categoryLabel` matches one of the categories in `allCategories`
6. Category counts will update automatically
7. Model will appear in the grid and be filterable
8. Categories will be enabled/disabled based on model availability

## Model Title Consistency Guidelines
- **Standard Practice**: Model titles should match their full model IDs
- **Example**: For model ID `"fal-ai/flux-pro/kontext"`, use title `"fal-ai/flux-pro/kontext"`
- **Benefits**: Eliminates confusion, improves debugging, maintains consistency across UI
- **Migration**: Existing models are being updated to follow this standard
- **Exception**: Only use human-readable titles when the model ID is not user-friendly

## API Integration
- Image generation services in [imageGeneration.ts](mdc:src/services/imageGeneration.ts)
- Pipeline processing utilities in [pipelineProcessing.ts](mdc:src/utils/pipelineProcessing.ts)
- Background removal in [backgroundRemoval.ts](mdc:src/utils/backgroundRemoval.ts)
- Backend functions in `supabase/functions/` support both full and short model ID formats

## Testing & Quality Assurance
- **Modernized Test Suite**: Cleaned up from 60+ to 43 focused tests, all passing ✅
- **Model Title Testing**: All tests updated to reflect standardized model naming (fal-ai format)
- **Core Test Coverage**: UnifiedGenerationInterface, ClothesChangingDiagnostic, imageUpload utilities
- **Removed Problematic Tests**: Eliminated complex integration tests with mocking issues
- **CI/CD Ready**: Reliable test execution without flaky dependencies

### Test Maintenance Best Practices
- Update tests when changing model titles or IDs
- Ensure new models include proper test coverage
- Focus on core functionality rather than complex UI mocking
- Use realistic test data matching actual model parameters
- Maintain test reliability for continuous integration

## Styling Guidelines
- Use Tailwind CSS classes consistently
- Dark theme with gray-800/gray-900 backgrounds
- Color-coded badges for model types (orange, blue, green, purple)
- Blue accent colors for interactive elements
- Consistent spacing and hover effects
- Disabled states use opacity-50 and cursor-not-allowed
- Enhanced visual hierarchy with proper headings and status indicators
