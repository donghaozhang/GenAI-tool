---
description:
globs:
alwaysApply: false
---
# Social Authentication Implementation Guide

This document covers the implementation of social authentication features including comprehensive Google OAuth setup, diagnostic tools, and Twitter OAuth configuration.

## üîç Google OAuth Complete Implementation

### üéØ Working Configuration (December 2024)
**Successfully implemented and tested Google OAuth with proper error resolution**

#### Current Working Credentials
```env
# Google OAuth 2.0 Configuration (Production Ready)
# Store these in .env file - NEVER commit secrets to git!
VITE_GOOGLE_CLIENT_ID=your_google_client_id_here
VITE_GOOGLE_CLIENT_SECRET=your_google_client_secret_here
```

**‚ö†Ô∏è SECURITY WARNING**: Never commit actual credentials to git. Always use environment variables.

#### Google Cloud Console Setup
- **Project**: `speedy-sunspot-460603-p7` (Project ID: 389790994997)
- **OAuth Consent Screen**: Published in Production mode
- **App Name**: `marketartAI`
- **User Type**: External (100 user limit)
- **Support Email**: `zdhpeter@gmail.com`

#### Authorized Configurations
```
JavaScript Origins:
- https://wdprvtqbwnhwbpufcmgg.supabase.co
- http://localhost:8080
- http://localhost:8081
- http://localhost:8082

Redirect URIs:
- https://wdprvtqbwnhwbpufcmgg.supabase.co/auth/v1/callback
```

#### Privacy Policy & Terms of Service
**Required for OAuth consent screen:**
- Privacy Policy: `http://localhost:8080/privacy` ‚Üí `src/pages/PrivacyPolicy.tsx`
- Terms of Service: `http://localhost:8080/terms` ‚Üí `src/pages/TermsOfService.tsx`
- Routes added to `src/App.tsx`

### üõ†Ô∏è Comprehensive Diagnostic Tools Suite

#### 15 Diagnostic Scripts Created (`scripts/` directory)
1. **`google-oauth-diagnostic.js`** - Complete OAuth configuration analysis
2. **`live-oauth-test.js`** - Real-time OAuth flow testing
3. **`browser-console-debug.js`** - Browser-based debugging interface
4. **`quick-console-test.js`** - Fast OAuth validation
5. **`verify-supabase-oauth.js`** - Supabase configuration verification
6. **`check-oauth-config.js`** - Configuration checker
7. **`test-live-oauth.js`** - Live testing script
8. **`oauth-status-summary.js`** - Status summary tool
9. **`debug-invalid-client.js`** - Invalid client error debugger
10. **`check-oauth-client-status.js`** - OAuth client status checker
11. **`fix-invalid-client.js`** - Step-by-step fix guide
12. **`final-verification.js`** - Final verification script
13. **`find-correct-oauth-client.js`** - Client ID finder
14. **`test-app-oauth.js`** - App-based OAuth testing
15. **`test-google-oauth.js`** - Google OAuth specific tests

#### Key Diagnostic Features
- **Real-time OAuth URL testing**
- **Client ID validation against Google's servers**
- **Supabase configuration verification**
- **Browser console integration**
- **Step-by-step troubleshooting guides**
- **Automated error detection and reporting**

### üö® Critical Error Resolution Patterns

#### "Error 401: invalid_client" Resolution
**Root Causes Identified:**
1. **Client ID mismatch** between Google Cloud Console and Supabase Dashboard
2. **Wrong Google Cloud project** - OAuth client must be in same project as consent screen
3. **Incomplete OAuth client configuration** - missing redirect URIs or JavaScript origins

**Resolution Process:**
1. **Verify Project Context** - Ensure OAuth client is in correct Google Cloud project
2. **Copy Exact Client ID** - Use exact string from Google Cloud Console
3. **Update Supabase Dashboard** - Match credentials exactly
4. **Test with Diagnostic Scripts** - Use browser console tools for validation

#### Route Handling for OAuth Redirects
**Problem**: OAuth redirects to `/ai-marketplace` causing 404 errors
**Solution**: Add route alias in `src/App.tsx`
```typescript
<Route path="/ai-marketplace" element={<AIModelMarketplace />} />
<Route path="/marketplace" element={<AIModelMarketplace />} />
```

### üß™ Testing Methodology

#### Google OAuth Test Page
Location: `src/pages/GoogleOAuthTest.tsx`
- Real-time configuration testing
- OAuth flow simulation
- Error reporting and diagnostics
- Route: `/google-test`

#### Browser Console Testing
```javascript
// Run in browser console on localhost:8080
console.log('üöÄ Quick Google OAuth Test');
const testUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${process.env.VITE_GOOGLE_CLIENT_ID}&redirect_uri=https%3A%2F%2Fwdprvtqbwnhwbpufcmgg.supabase.co%2Fauth%2Fv1%2Fcallback&response_type=code&scope=email+profile`;
window.open(testUrl, '_blank');
```

#### Development Testing Ports
- **Primary**: `http://localhost:8080/`
- **Backup**: `http://localhost:8081/`
- **Fallback**: `http://localhost:8082/`

## üé® Google Icon Implementation

### GoogleIcon Component
Location: `src/components/ui/google-icon.tsx`

```typescript
export const GoogleIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg
    aria-hidden
    viewBox="0 0 488 512"
    className="h-4 w-4"
    fill="currentColor"
    {...props}
  >
    {/* Official Google "G" logo SVG paths */}
  </svg>
);
```

### Integration Pattern
Replace generic Mail icons with branded Google icon:

```typescript
// ‚úÖ CORRECT: Use branded Google icon
import { GoogleIcon } from '@/components/ui/google-icon';

<Button onClick={() => handleSocialLogin('google')}>
  <GoogleIcon />
</Button>

// ‚ùå WRONG: Generic mail icon for Google
import { Mail } from 'lucide-react';
<Button><Mail className="h-4 w-4" /></Button>
```

## üê¶ Twitter OAuth Configuration

### Critical OAuth Version Requirements
**Supabase Auth uses OAuth 1.0a for Twitter, NOT OAuth 2.0**

### Twitter Developer Portal Setup
1. **App Configuration**:
   - App Type: "Web App, Automated App or Bot"
   - Client Type: "Confidential client"
   - Permissions: "Read and write and Direct message"

2. **Callback URLs** (required):
   ```
   https://wdprvtqbwnhwbpufcmgg.supabase.co/auth/v1/callback
   http://localhost:8080/
   http://localhost:8081/
   http://localhost:8082/
   ```

3. **Credentials to Use**:
   - **Use**: OAuth 1.0a Consumer Keys
     - API Key (Consumer Key): `HjHB8STk7FoP7HigMv1njanr7`
     - API Secret Key (Consumer Secret): `j3jxdGfDm5Y7aRKcrXYybyj30558MujuIJhDCpzQKkDBqMgVDu`
   - **Don't Use**: OAuth 2.0 Client ID/Secret

### Supabase Dashboard Configuration
Navigate to: Authentication ‚Üí Providers ‚Üí Twitter

```
API Key: HjHB8STk7FoP7HigMv1njanr7
API Secret Key: j3jxdGfDm5Y7aRKcrXYybyj30558MujuIJhDCpzQKkDBqMgVDu
Callback URL: https://wdprvtqbwnhwbpufcmgg.supabase.co/auth/v1/callback
```

## üîß OAuth Implementation Patterns

### Social Login Handler
```typescript
const handleSocialLogin = async (provider: 'google' | 'twitter' | 'github') => {
  try {
    const { error } = await supabase.auth.signInWithOAuth({
      provider,
      options: {
        redirectTo: `${window.location.origin}/ai-marketplace`
      }
    });
    
    if (error) {
      console.error(`${provider} OAuth failed:`, error);
      toast.error(`Failed to sign in with ${provider}`);
    }
  } catch (error: any) {
    console.error(`${provider} OAuth exception:`, error);
    toast.error(`Authentication error: ${error.message}`);
  }
};
```

### Error Patterns and Solutions

#### Google OAuth "invalid_client" Error
**Symptoms**: 
- `Error 401: invalid_client`
- `The OAuth client was not found`
- Redirect to Google error page

**Root Causes**:
1. Client ID doesn't exist in Google's database
2. OAuth client in wrong Google Cloud project
3. Supabase using different Client ID than configured

**Solution Process**:
1. Verify correct Google Cloud project context
2. Create new OAuth client if needed in correct project
3. Copy exact Client ID from Google Cloud Console
4. Update Supabase Dashboard with exact credentials
5. Test with diagnostic scripts

#### Twitter OAuth 404 Error
**Symptom**: `GET https://wdprvtqbwnhwbpufcmgg.supabase.co/ 404 (Not Found)`

**Root Cause**: Using OAuth 2.0 credentials instead of OAuth 1.0a

**Solution**: Update Supabase dashboard with OAuth 1.0a Consumer Keys

## üîí Security Best Practices

### Environment Variables
Store OAuth credentials in `.env` file (git-ignored):

```env
# Google OAuth 2.0 Configuration (Working)
VITE_GOOGLE_CLIENT_ID=your_google_client_id_here
VITE_GOOGLE_CLIENT_SECRET=your_google_client_secret_here

# Twitter OAuth 1.0a Configuration
VITE_TWITTER_CLIENT_ID=HjHB8STk7FoP7HigMv1njanr7
VITE_TWITTER_CLIENT_SECRET=j3jxdGfDm5Y7aRKcrXYybyj30558MujuIJhDCpzQKkDBqMgVDu
```

**üîí SECURITY NOTES:**
- Never commit actual credentials to git repositories
- Use environment variables for all sensitive configuration
- Rotate credentials if accidentally exposed
- Keep `.env` file in `.gitignore`

### Callback URL Security
- Always use HTTPS for production callbacks
- Include localhost URLs for development testing
- Validate redirect URLs in provider settings
- Use `/ai-marketplace` as primary redirect target

## üì± UI/UX Implementation

### Social Login Button Layout
```typescript
<div className="grid grid-cols-3 gap-3">
  <Button variant="outline" onClick={() => handleSocialLogin('google')}>
    <GoogleIcon />
  </Button>
  <Button variant="outline" onClick={() => handleSocialLogin('twitter')}>
    <Twitter className="h-4 w-4" />
  </Button>
  <Button variant="outline" onClick={() => handleSocialLogin('github')}>
    <Github className="h-4 w-4" />
  </Button>
</div>
```

### Visual Consistency
- Use brand-specific icons for each provider
- Maintain consistent button sizing (`h-4 w-4`)
- Apply consistent styling (`bg-gray-800 border-gray-600 hover:bg-gray-700`)

## ‚úÖ Deployment Checklist

Before deploying social authentication:

1. **Google OAuth** ‚úÖ:
   - ‚úÖ OAuth 2.0 credentials configured in Supabase dashboard
   - ‚úÖ Authorized redirect URIs configured in Google Console
   - ‚úÖ OAuth consent screen published in production
   - ‚úÖ Privacy policy and terms of service pages created
   - ‚úÖ GoogleIcon component implemented
   - ‚úÖ Diagnostic tools created and tested
   - ‚úÖ Route aliases configured for OAuth redirects

2. **Twitter OAuth**:
   - ‚úÖ OAuth 1.0a credentials configured in Supabase dashboard
   - ‚úÖ Callback URLs added to Twitter app
   - ‚úÖ App permissions set correctly

3. **GitHub OAuth**:
   - ‚úÖ OAuth app configured with callback URLs
   - ‚úÖ Credentials added to Supabase dashboard

4. **Testing**:
   - ‚úÖ All providers tested in development
   - ‚úÖ Redirect flows working correctly
   - ‚úÖ Error handling implemented
   - ‚úÖ Diagnostic tools validated

## üö® Common Pitfalls & Solutions

### OAuth Version Mismatch
- **Twitter**: Must use OAuth 1.0a (Consumer Keys)
- **Google**: Uses OAuth 2.0 (Client ID/Secret)
- **GitHub**: Uses OAuth 2.0 (Client ID/Secret)

### Google Cloud Project Context
- **Critical**: OAuth client must be in same project as published consent screen
- **Verify**: Project name in top-left of Google Cloud Console
- **Fix**: Create OAuth client in correct project (`speedy-sunspot-460603-p7`)

### Callback URL Mismatches
- Ensure exact URL matches between provider and Supabase
- Include all development ports for local testing
- Use HTTPS for production environments
- Add route aliases for OAuth redirect targets

### Client ID/Secret Precision
- Copy credentials exactly from provider console
- No extra spaces or characters
- Update both Supabase Dashboard and environment files
- Test with diagnostic scripts after updates

### Icon Implementation
- Use brand-specific icons, not generic ones
- Maintain consistent sizing and styling
- Ensure proper accessibility attributes

## üéØ Success Metrics

**Google OAuth Implementation Complete:**
- ‚úÖ No more "invalid_client" errors
- ‚úÖ Successful authentication flow
- ‚úÖ Proper redirect handling
- ‚úÖ Comprehensive diagnostic tooling
- ‚úÖ Production-ready consent screen
- ‚úÖ Complete documentation and troubleshooting guides

This implementation provides a complete, secure, and thoroughly tested social authentication system with extensive diagnostic capabilities and proper error resolution patterns.
