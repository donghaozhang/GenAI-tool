---
description: 
globs: 
alwaysApply: true
---
# GenAI Tool Project Structure

This is a React + TypeScript + Vite application focused on AI model marketplace functionality.

## Main Entry Points
- [main.tsx](mdc:src/main.tsx) - Application entry point
- [App.tsx](mdc:src/App.tsx) - Main app component with routing
- [Index.tsx](mdc:src/pages/Index.tsx) - Landing page that redirects authenticated users to marketplace

## Key Pages
- [AIModelMarketplace.tsx](mdc:src/pages/AIModelMarketplace.tsx) - Main marketplace interface with optimized layout
- [NotFound.tsx](mdc:src/pages/NotFound.tsx) - 404 page with AI marketplace theme

## Core Components Structure
```
src/components/
├── auth/ - Authentication components
├── marketplace/ - AI marketplace components (main focus)
├── ui/ - Reusable UI components (shadcn/ui)
└── UserProfile.tsx - User profile component
```

## Important Marketplace Components (Layout Order)
- [UnifiedGenerationInterface.tsx](mdc:src/components/marketplace/UnifiedGenerationInterface.tsx) - Main interface with single/batch mode toggle
- [ModelSelector.tsx](mdc:src/components/marketplace/ModelSelector.tsx) - Single and multi-select model selection with type badges
- [BatchResultsDisplay.tsx](mdc:src/components/marketplace/BatchResultsDisplay.tsx) - Dedicated batch generation results component
- [ImageUploadSection.tsx](mdc:src/components/marketplace/ImageUploadSection.tsx) - File upload with data URL conversion for API compatibility
- [MultiImageDisplay.tsx](mdc:src/components/marketplace/MultiImageDisplay.tsx) - Display generated/uploaded images
- [ImagePipeline.tsx](mdc:src/components/marketplace/ImagePipeline.tsx) - Multi-step image processing pipeline with clothes changing support
- [TrendingSection.tsx](mdc:src/components/marketplace/TrendingSection.tsx) - Popular model categories
- [CategoryFilter.tsx](mdc:src/components/marketplace/CategoryFilter.tsx) - Dynamic category filtering with real model counts
- [ModelGrid.tsx](mdc:src/components/marketplace/ModelGrid.tsx) - Featured AI models grid
- [ModelCard.tsx](mdc:src/components/marketplace/ModelCard.tsx) - Individual model display cards

## Data & Configuration
- [models.ts](mdc:src/constants/models.ts) - Centralized model data with full fal-ai format IDs
- [pipelineModels.ts](mdc:src/constants/pipelineModels.ts) - Pipeline-specific model configurations
- [env.ts](mdc:src/config/env.ts) - Centralized environment configuration
- [client.ts](mdc:src/integrations/supabase/client.ts) - Supabase client setup

## Service Layer
- [imageGeneration.ts](mdc:src/services/imageGeneration.ts) - AI image generation with single and batch processing support
- [pipelineProcessing.ts](mdc:src/utils/pipelineProcessing.ts) - Multi-step image processing
- [backgroundRemoval.ts](mdc:src/utils/backgroundRemoval.ts) - Background removal utilities

## Authentication
- [AuthContext.tsx](mdc:src/contexts/AuthContext.tsx) - Authentication state management
- Authentication pages in [auth/](mdc:src/components/auth) directory

## Backend Functions
- `supabase/functions/process-image-pipeline/` - **Updated Edge Function** using modern @fal-ai/client for clothes changing support
- `supabase/functions/generate-pokemon-images/` - Specialized image generation
- `supabase/functions/process-elevenlabs-video/` - Video processing integration

## Test Suite Structure
```
src/__tests__/
├── components/marketplace/     # Core component tests (UnifiedGenerationInterface)
├── diagnostics/               # Diagnostic tests (ClothesChangingDiagnostic - 15 tests)
├── integration/              # Essential integration tests (ClothesChangingTest, LivePipelineTest)
└── utils/                    # Utility function tests (imageUpload)
```
- **43 focused tests** with all tests passing ✅
- **Modernized test suite** with cleanup of problematic tests
- **Model title standardization** reflected in all test expectations
- **Test categories**: Core component, diagnostic, essential integration, and utility tests

## Key Features
- **Unified Generation Interface** combining model selection, input methods, and generation controls with batch mode
- **Batch Processing System** for multi-model comparison with parallel generation and error isolation
- **Full fal-ai model ID format** throughout the application with consistent title formatting
- **Enhanced model selector** with single/multi-select modes and type indicators
- **Dynamic category filtering** with automatic count calculation and disabled states
- **Comprehensive pipeline processing** with multiple AI model integrations
- **Working clothes changing functionality** using FLUX Pro Kontext model (fal-ai/flux-pro/kontext)
- **Data URL support** for uploaded images (base64 format for API compatibility)
- **Comprehensive test coverage** ensuring reliability and functionality
- **Standardized model naming** with titles matching full model IDs for clarity and consistency
- **Extensive Model Collection** including FLUX variants, Bytedance SeedDream, MiniMax Hailuo, and Luma Photon models
- **Multi-Modal Support** covering Text-to-Image, Image-to-Image, Image-to-Video, and specialized reframing capabilities


