---
description: 
globs: 
alwaysApply: true
---
# Development Workflow

This document outlines the development workflow for the GenAI Tool project.

## Project Setup
1. Clone the repository
2. Copy [.env.example](mdc:.env.example) to `.env` and fill in required values
3. Run `npm install` to install dependencies
4. **Environment Setup**:
   - For local development: `npm run env:local` (uses local Supabase)
   - For remote development: `npm run env:remote` (uses production Supabase)
5. **Start Local Supabase** (if using local environment): `npm run local:supabase`
6. Start development server: `npm run dev` or use environment-specific commands

## Environment Configuration System

### **Flexible Environment Switching**
The project now supports seamless switching between local and remote environments:

- **Local Mode**: Uses local Supabase instance for development and testing
- **Remote Mode**: Uses production Supabase instance for production-like testing

### **Environment Commands**
- `npm run env:local` - Switch to local environment
- `npm run env:remote` - Switch to remote environment  
- `npm run dev:local` - Switch to local and start dev server
- `npm run dev:remote` - Switch to remote and start dev server

### **Local Supabase Commands**
- `npm run local:supabase` - Start local Supabase instance
- `npm run local:stop` - Stop local Supabase instance
- `supabase functions deploy --no-verify-jwt` - Deploy Edge Functions locally

### **Environment Configuration Files**
- [.env](mdc:.env) - Main environment configuration with automatic switching
- [src/config/env.ts](mdc:src/config/env.ts) - Dynamic environment configuration loader
- [switch-env.js](mdc:switch-env.js) - Utility script for environment switching

## Available Scripts
- `npm run dev` - Start development server (Vite)
- `npm run dev:local` - Switch to local environment and start dev server
- `npm run dev:remote` - Switch to remote environment and start dev server
- `npm run build` - Build for production
- `npm run preview` - Preview production build
- `npm run lint` - Run ESLint
- `npm run env:local` - Switch to local environment
- `npm run env:remote` - Switch to remote environment
- `npm run local:supabase` - Start local Supabase
- `npm run local:stop` - Stop local Supabase

## OAuth Diagnostic Tools & Testing

### **Comprehensive Diagnostic Scripts Suite**
Location: `scripts/` directory (15 diagnostic tools)

#### **Key Diagnostic Scripts**:
- **`google-oauth-diagnostic.js`** - Complete OAuth configuration analysis
- **`live-oauth-test.js`** - Real-time OAuth flow testing  
- **`browser-console-debug.js`** - Browser-based debugging interface
- **`quick-console-test.js`** - Fast OAuth validation
- **`verify-supabase-oauth.js`** - Supabase configuration verification

#### **OAuth Testing Workflow**:
1. **Start Development Server**: `npm run dev` (usually runs on `http://localhost:8080`)
2. **Navigate to Auth Page**: `http://localhost:8080/auth`
3. **Run Diagnostic Script**: Copy and paste any diagnostic script into browser console
4. **Test OAuth Flow**: Use built-in test buttons or manual OAuth testing
5. **Debug Issues**: Use diagnostic output to identify and resolve problems

#### **Browser Console Testing**:
```javascript
// Quick Google OAuth Test (run in browser console)
console.log('ðŸš€ Quick Google OAuth Test');
const testUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${process.env.VITE_GOOGLE_CLIENT_ID}&redirect_uri=https%3A%2F%2Fwdprvtqbwnhwbpufcmgg.supabase.co%2Fauth%2Fv1%2Fcallback&response_type=code&scope=email+profile`;
window.open(testUrl, '_blank');
```

#### **OAuth Test Pages**:
- **Google OAuth Test**: `/google-test` â†’ `src/pages/GoogleOAuthTest.tsx`
- **Twitter OAuth Test**: `/twitter-test` â†’ `src/pages/TwitterTest.tsx`
- **Privacy Policy**: `/privacy` â†’ `src/pages/PrivacyPolicy.tsx`
- **Terms of Service**: `/terms` â†’ `src/pages/TermsOfService.tsx`

### **Development Testing Ports**
- **Primary**: `http://localhost:8080/` (default)
- **Backup**: `http://localhost:8081/` (if 8080 is busy)
- **Fallback**: `http://localhost:8082/` (if both above are busy)

## Technology Stack
- **Framework**: React 18 with TypeScript
- **Build Tool**: Vite
- **Styling**: Tailwind CSS + shadcn/ui components
- **Backend**: Supabase (authentication, database, Edge Functions)
- **State Management**: React Context (AuthContext)
- **Routing**: React Router
- **UI Components**: shadcn/ui in [components/ui/](mdc:src/components/ui)
- **Environment Management**: Dynamic local/remote configuration

## File Organization Principles
- Components are organized by feature (auth, marketplace, ui)
- Shared data and utilities in `constants/` and `utils/`
- Type definitions in `types/`
- Service integrations in `services/` and `integrations/`

## Git Workflow
- Main branch: `main`
- Repository: https://github.com/donghaozhang/GenAI-tool
- Commit messages should be descriptive and include context
- Push changes regularly to maintain backup

## Key Configuration Files
- [package.json](mdc:package.json) - Dependencies and scripts
- [.env](mdc:.env) - Environment configuration with local/remote switching
- [src/config/env.ts](mdc:src/config/env.ts) - Dynamic environment configuration
- [switch-env.js](mdc:switch-env.js) - Environment switching utility
- [vite.config.ts](mdc:vite.config.ts) - Vite configuration
- [tailwind.config.ts](mdc:tailwind.config.ts) - Tailwind CSS configuration
- [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration

## User Flow
1. Landing page ([Index.tsx](mdc:src/pages/Index.tsx))
2. Authentication (if not logged in)
3. AI Marketplace ([AIModelMarketplace.tsx](mdc:src/pages/AIModelMarketplace.tsx))
4. Model interaction and image generation

## Development Environment Setup

### **Local Development (Recommended)**
1. Run `npm run env:local` to switch to local environment
2. Start local Supabase: `npm run local:supabase`
3. Deploy Edge Functions: `supabase functions deploy --no-verify-jwt`
4. Start development server: `npm run dev`
5. Access at `http://localhost:8080` (or `8081` if port is busy)

### **Remote Development**
1. Run `npm run env:remote` to switch to remote environment
2. Ensure FAL API key is set in `.env` file
3. Start development server: `npm run dev`

### **Quick Start Commands**
- **Full Local Setup**: `npm run local:supabase && npm run dev:local`
- **Remote Setup**: `npm run dev:remote`

## Development Notes
- The application focuses on AI marketplace functionality
- Space Invaders game component exists but is not part of main user flow
- Authentication is handled through Supabase
- **Environment Switching**: Use `VITE_ENV_MODE` to control local/remote configuration
- **Edge Functions**: Pipeline processing requires either local Supabase or remote deployment
- **Console Logging**: Environment configuration is logged in development mode
- **Automatic Configuration**: Environment settings are automatically applied based on mode

## Troubleshooting

### **Connection Refused Errors**
- Ensure local Supabase is running: `npm run local:supabase`
- Check environment mode: Look for console logs showing active configuration
- Verify Edge Functions are deployed locally

### **Environment Issues**
- Use `node switch-env.js local` or `node switch-env.js remote` to manually switch
- Check `.env` file for correct `VITE_ENV_MODE` value
- Restart development server after environment changes

### **OAuth Authentication Issues**

#### **Google OAuth "Error 401: invalid_client"**
**Symptoms**: 
- `Error 401: invalid_client`
- `The OAuth client was not found`
- Redirect to Google error page

**Diagnosis**:
1. Run diagnostic script in browser console: `scripts/google-oauth-diagnostic.js`
2. Check Google Cloud Console project context (must be `speedy-sunspot-460603-p7`)
3. Verify Client ID matches exactly between Google Cloud Console and Supabase Dashboard

**Solutions**:
1. **Verify Correct Project**: Ensure OAuth client exists in `speedy-sunspot-460603-p7` project
2. **Copy Exact Credentials**: Use exact Client ID from Google Cloud Console
3. **Update Supabase Dashboard**: Match credentials exactly in Auth â†’ Providers â†’ Google
4. **Test with Diagnostics**: Use `scripts/quick-console-test.js` for validation

#### **OAuth Redirect 404 Errors**
**Symptoms**: 
- OAuth completes successfully but shows 404 page
- URL shows `/ai-marketplace` but page not found

**Solution**: 
- Ensure route aliases exist in `src/App.tsx`:
```typescript
<Route path="/ai-marketplace" element={<AIModelMarketplace />} />
<Route path="/marketplace" element={<AIModelMarketplace />} />
```

#### **Twitter OAuth 404 Errors**
**Symptoms**: `GET https://wdprvtqbwnhwbpufcmgg.supabase.co/ 404 (Not Found)`

**Root Cause**: Using OAuth 2.0 credentials instead of OAuth 1.0a

**Solution**: Update Supabase dashboard with OAuth 1.0a Consumer Keys (not Client ID/Secret)

### **Development Server Issues**

#### **Port Conflicts**
- **Default Port**: `8080` (preferred)
- **Backup Ports**: `8081`, `8082` (automatically tried if 8080 busy)
- **Solution**: Update OAuth redirect URIs to include all ports in use

#### **Hot Module Replacement (HMR) Issues**
- **Symptom**: Excessive HMR updates (x10+ updates for single change)
- **Cause**: Often related to CSS/styling changes
- **Solution**: Restart development server if HMR becomes unstable

### **Diagnostic Tools Usage**

#### **Quick OAuth Testing**:
1. Open browser console on `http://localhost:8080/auth`
2. Paste and run any diagnostic script from `scripts/` directory
3. Follow diagnostic output instructions
4. Use built-in test buttons or manual testing

#### **Common Diagnostic Scripts**:
- **Quick Test**: `scripts/quick-console-test.js`
- **Full Diagnosis**: `scripts/google-oauth-diagnostic.js`
- **Live Testing**: `scripts/live-oauth-test.js`
- **Configuration Check**: `scripts/verify-supabase-oauth.js`

### **Environment Variable Issues**
- **Check Current Config**: Look for console logs showing active environment
- **Manual Switch**: Use `node switch-env.js local` or `node switch-env.js remote`
- **Validation**: Ensure `.env` file contains correct `VITE_ENV_MODE` value
- **OAuth Credentials**: Verify Google OAuth credentials match working configuration:
  ```env
  # Example format - replace with your actual credentials
  VITE_GOOGLE_CLIENT_ID=your_google_client_id_here
  VITE_GOOGLE_CLIENT_SECRET=your_google_client_secret_here
  ```

**ðŸ”’ SECURITY WARNING**: Never commit actual OAuth credentials to git repositories. Always use environment variables and keep `.env` in `.gitignore`.

